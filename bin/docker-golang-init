#!/bin/bash
# vim: set filetype=sh :
set -e
source "$(dirname $0)/.parse_yaml.sh"

# docker-golang setup file creates the shared volume, .golang file and installs
# some of the core binaries needed for our wrappers

COMPOSE_YML="$(pwd)/docker-compose.yml"

# check for a docker-compose.yml in the working dir, else use the one packaged
# with docker-golang
if [ ! -f  "${COMPOSE_YML}" ]; then
	echo "No docker-compose.yml file (in \`$(pwd)\`)"
	exit 1;
fi

if [ "${RESET}" = true ]; then
	docker-compose rm -v golang
fi

# parse the docker-compose.yml
eval $(parse_yaml $COMPOSE_YML)

# check for a golang service inside the docker-compose.yml file in use.
# NOTE we can't change $service_golang itself, so look for the "image"
if [ -z "$services_golang_image" ]; then
	echo 'Requires a `golang` service in your docker-compose.yml'
	exit 1
fi

GOLANG_VERSION=$(echo "$services_golang_image" | sed 's/golang:\(.*\)/\1/g')

# create the docker-compose `golang` volume
docker-compose create golang

{
echo "GOLANG_VERSION=$GOLANG_VERSION"
echo "GOLANG_VOLUMES_FROM=$(docker-compose ps -q golang)"
} > $(pwd)/.golang

# install the necessary core binaries
go get -u github.com/nsf/gocode
go get -u github.com/golang/lint/golint

# vim-go :GoDoc
go get -u github.com/zmb3/gogetdoc

# vendor
go get -u github.com/govend/govend
go get -u github.com/Masterminds/glide
go get -u github.com/kardianos/govendor

